#!/bin/bash

# Detect operating system and distribution
detect_os() {
    local os_type
    local os_dist=""

    case "$(uname -s)" in
        Linux*)
            os_type="linux"
            # Detect Linux distribution
            if [ -f "/etc/os-release" ]; then
                if grep -qi "ubuntu" /etc/os-release; then
                    os_dist="ubuntu"
                elif grep -qi "rhel\|centos\|fedora\|rocky" /etc/os-release; then
                    os_dist="redhat"
                fi
            fi
            ;;
        Darwin*)    
            os_type="macos"
            ;;
        CYGWIN*|MINGW*|MSYS*) 
            os_type="windows"
            ;;
        *)          
            os_type="unknown"
            ;;
    esac
    echo "${os_type}:${os_dist}"
}

# Get user and group IDs based on OS
get_user_info() {
    local os=$1
    local dist=$2

    # Get current user and group IDs
    local user_id=$(id -u)
    local group_id=$(id -g)

    # Set default web user and group
    local web_user="www-data"
    local web_group="www-data"

    case "$os" in
        "linux")
            case "$dist" in
                "redhat")
                    web_user="apache"
                    web_group="apache"
                    ;;
            esac
            ;;
        "macos"|"windows")
            # Use www-data for non-Linux systems
            web_user="www-data"
            web_group="www-data"
            ;;
    esac

    # Export all variables
    cat << EOF
USER_ID=${user_id}
GROUP_ID=${group_id}
WEB_USER=${web_user}
WEB_GROUP=${web_group}
EOF
}

# Set up environment variables for Docker
setup_env() {
    local os=$1
    local dist=$2
    local user_info=$3

    # Create .env file for docker-compose
    echo "# Generated by docker-setup.sh" > .env
    echo "# OS: $os" >> .env
    echo "# Distribution: $dist" >> .env
    echo >> .env

    # Add user info to .env
    echo "$user_info" >> .env

    # OS-specific settings
    case "$os" in
        "linux")
            echo "LINUX_DIST=$dist" >> .env
            ;;
        "macos")
            echo "LINUX_DIST=ubuntu" >> .env
            echo "DOCKER_BUILDKIT=1" >> .env
            echo "COMPOSE_DOCKER_CLI_BUILD=1" >> .env
            ;;
        "windows")
            echo "LINUX_DIST=ubuntu" >> .env
            echo "COMPOSE_CONVERT_WINDOWS_PATHS=1" >> .env
            ;;
        *)
            echo "LINUX_DIST=ubuntu" >> .env
            ;;
    esac

    # Common settings
    echo "PHP_VERSION=8.1" >> .env
    echo "APACHE_VERSION=2.4" >> .env
    echo "MARIADB_VERSION=10.5" >> .env
}

# Install required packages based on OS
install_requirements() {
    local os=$1
    local dist=$2

    echo "Checking and installing required packages..."

    case "$os" in
        "linux")
            case "$dist" in
                "ubuntu")
                    if ! command -v docker &> /dev/null; then
                        echo "Installing Docker..."
                        sudo apt-get update
                        sudo apt-get install -y docker.io docker-compose
                    fi
                    ;;
                "redhat")
                    if ! command -v docker &> /dev/null; then
                        echo "Installing Docker..."
                        sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
                        sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
                    fi
                    ;;
            esac
            ;;
        "macos")
            if ! command -v docker &> /dev/null; then
                echo "Please install Docker Desktop for Mac from https://www.docker.com/products/docker-desktop"
                exit 1
            fi
            ;;
        "windows")
            if ! command -v docker &> /dev/null; then
                echo "Please install Docker Desktop for Windows from https://www.docker.com/products/docker-desktop"
                exit 1
            fi
            ;;
    esac
}

# Main execution
OS_INFO=$(detect_os)
OS=$(echo $OS_INFO | cut -d: -f1)
DIST=$(echo $OS_INFO | cut -d: -f2)

echo "Detected OS: $OS"
echo "Detected Distribution: $DIST"

# Install requirements
install_requirements "$OS" "$DIST"

# Get user information
USER_INFO=$(get_user_info "$OS" "$DIST")
echo "Using user settings:"
echo "$USER_INFO"

# Setup environment
setup_env "$OS" "$DIST" "$USER_INFO"

echo "Environment setup complete."
