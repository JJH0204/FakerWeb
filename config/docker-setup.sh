#!/bin/bash

# Detect operating system and distribution
detect_os() {
    local os
    local dist

    case "$(uname -s)" in
        Linux*)
            os="linux"
            if [ -f /etc/os-release ]; then
                . /etc/os-release
                case "$ID" in
                    ubuntu)
                        dist="ubuntu"
                        ;;
                    kali)
                        dist="kali"
                        ;;
                    rhel|redhat)
                        dist="redhat"
                        ;;
                    centos)
                        dist="centos"
                        ;;
                    rocky)
                        dist="rocky"
                        ;;
                    *)
                        dist="ubuntu"  # fallback to ubuntu
                        ;;
                esac
            else
                dist="ubuntu"  # fallback to ubuntu if /etc/os-release doesn't exist
            fi
            ;;
        Darwin*)
            os="macos"
            dist=""
            ;;
        CYGWIN*|MINGW32*|MSYS*|MINGW*)
            os="windows"
            dist=""
            ;;
        *)
            os="unknown"
            dist=""
            ;;
    esac

    echo "$os:$dist"
}

# Get user and group IDs based on OS
get_user_info() {
    local os=$1
    local dist=$2
    local user_info=""

    case "$os" in
        "linux")
            # For RedHat-based systems, use apache user/group
            if [ "$dist" = "redhat" ] || [ "$dist" = "centos" ] || [ "$dist" = "rocky" ]; then
                user_info="WEB_USER=apache\nWEB_GROUP=apache"
            else
                user_info="WEB_USER=www-data\nWEB_GROUP=www-data"
            fi
            user_info="$user_info\nUSER_ID=$(id -u)\nGROUP_ID=$(id -g)"
            ;;
        "macos")
            user_info="WEB_USER=www-data\nWEB_GROUP=www-data\nUSER_ID=$(id -u)\nGROUP_ID=$(id -g)"
            ;;
        "windows")
            user_info="WEB_USER=www-data\nWEB_GROUP=www-data\nUSER_ID=1000\nGROUP_ID=1000"
            ;;
        *)
            user_info="WEB_USER=www-data\nWEB_GROUP=www-data\nUSER_ID=1000\nGROUP_ID=1000"
            ;;
    esac

    echo -e "$user_info"
}

# Set up environment variables for Docker
setup_env() {
    local os=$1
    local dist=$2
    local user_info=$3

    # Create .env file for docker-compose
    echo "# Generated by docker-setup.sh" > .env
    echo "# OS: $os" >> .env
    echo "# Distribution: $dist" >> .env
    echo >> .env

    # Add user info to .env
    echo "$user_info" >> .env

    # OS-specific settings
    case "$os" in
        "linux")
            echo "OS_TYPE=linux" >> .env
            echo "LINUX_DIST=$dist" >> .env
            ;;
        "macos")
            echo "OS_TYPE=macos" >> .env
            echo "LINUX_DIST=ubuntu" >> .env
            echo "DOCKER_BUILDKIT=1" >> .env
            echo "COMPOSE_DOCKER_CLI_BUILD=1" >> .env
            ;;
        "windows")
            echo "OS_TYPE=windows" >> .env
            echo "LINUX_DIST=ubuntu" >> .env
            echo "COMPOSE_CONVERT_WINDOWS_PATHS=1" >> .env
            ;;
        *)
            echo "OS_TYPE=unknown" >> .env
            echo "LINUX_DIST=ubuntu" >> .env
            ;;
    esac

    # Common settings
    echo "PHP_VERSION=8.1" >> .env
    echo "APACHE_VERSION=2.4" >> .env
    echo "MARIADB_VERSION=10.5" >> .env
}

# Install required packages based on OS
install_requirements() {
    local os=$1
    local dist=$2

    echo "Checking Docker installation..."
    if ! command -v docker &> /dev/null; then
        echo "Docker is not installed."
        case "$os" in
            "linux")
                case "$dist" in
                    "ubuntu"|"kali")
                        echo "Installing Docker for Ubuntu/Kali..."
                        sudo apt-get update
                        sudo apt-get install -y docker.io docker-compose
                        ;;
                    "redhat"|"centos"|"rocky")
                        echo "Installing Docker for RHEL/CentOS/Rocky..."
                        sudo dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
                        sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
                        sudo systemctl start docker
                        sudo systemctl enable docker
                        ;;
                esac
                ;;
            "macos")
                echo "Please install Docker Desktop for Mac from https://www.docker.com/products/docker-desktop"
                ;;
            "windows")
                echo "Please install Docker Desktop for Windows from https://www.docker.com/products/docker-desktop"
                ;;
        esac
    else
        echo "Docker is already installed."
    fi
}

# Main execution
OS_INFO=$(detect_os)
OS=$(echo $OS_INFO | cut -d: -f1)
DIST=$(echo $OS_INFO | cut -d: -f2)

echo "Detected OS: $OS"
echo "Detected Distribution: $DIST"

# Get user info
USER_INFO=$(get_user_info "$OS" "$DIST")

# Set up environment
setup_env "$OS" "$DIST" "$USER_INFO"

# Install requirements
install_requirements "$OS" "$DIST"

echo "Setup complete. You can now run 'docker-compose up -d' to start the services."
